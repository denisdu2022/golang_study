package onsmqtt

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// BatchSendMessages invokes the onsmqtt.BatchSendMessages API synchronously
// api document: https://help.aliyun.com/api/onsmqtt/batchsendmessages.html
func (client *Client) BatchSendMessages(request *BatchSendMessagesRequest) (response *BatchSendMessagesResponse, err error) {
	response = CreateBatchSendMessagesResponse()
	err = client.DoAction(request, response)
	return
}

// BatchSendMessagesWithChan invokes the onsmqtt.BatchSendMessages API asynchronously
// api document: https://help.aliyun.com/api/onsmqtt/batchsendmessages.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) BatchSendMessagesWithChan(request *BatchSendMessagesRequest) (<-chan *BatchSendMessagesResponse, <-chan error) {
	responseChan := make(chan *BatchSendMessagesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.BatchSendMessages(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// BatchSendMessagesWithCallback invokes the onsmqtt.BatchSendMessages API asynchronously
// api document: https://help.aliyun.com/api/onsmqtt/batchsendmessages.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) BatchSendMessagesWithCallback(request *BatchSendMessagesRequest, callback func(response *BatchSendMessagesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *BatchSendMessagesResponse
		var err error
		defer close(result)
		response, err = client.BatchSendMessages(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// BatchSendMessagesRequest is the request struct for api BatchSendMessages
type BatchSendMessagesRequest struct {
	*requests.RpcRequest
	NoPersistFlag requests.Boolean             `position:"Query" name:"NoPersistFlag"`
	InstanceId    string                       `position:"Query" name:"InstanceId"`
	Messages      *[]BatchSendMessagesMessages `position:"Query" name:"Messages"  type:"Repeated"`
}

// BatchSendMessagesMessages is a repeated param struct in BatchSendMessagesRequest
type BatchSendMessagesMessages struct {
	Payload   string    `name:"Payload"`
	Topics    *[]string `name:"Topics" type:"Repeated"`
	Id        string    `name:"Id"`
	ReceiptId string    `name:"ReceiptId"`
}

// BatchSendMessagesResponse is the response struct for api BatchSendMessages
type BatchSendMessagesResponse struct {
	*responses.BaseResponse
	RequestId string          `json:"RequestId" xml:"RequestId"`
	Responses []ResponsesItem `json:"Responses" xml:"Responses"`
}

// CreateBatchSendMessagesRequest creates a request to invoke BatchSendMessages API
func CreateBatchSendMessagesRequest() (request *BatchSendMessagesRequest) {
	request = &BatchSendMessagesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("OnsMqtt", "2019-12-11", "BatchSendMessages", "onsmqtt", "openAPI")
	return
}

// CreateBatchSendMessagesResponse creates a response to parse from BatchSendMessages response
func CreateBatchSendMessagesResponse() (response *BatchSendMessagesResponse) {
	response = &BatchSendMessagesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
