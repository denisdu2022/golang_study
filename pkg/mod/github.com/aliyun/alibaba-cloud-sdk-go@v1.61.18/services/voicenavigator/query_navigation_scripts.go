package voicenavigator

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryNavigationScripts invokes the voicenavigator.QueryNavigationScripts API synchronously
// api document: https://help.aliyun.com/api/voicenavigator/querynavigationscripts.html
func (client *Client) QueryNavigationScripts(request *QueryNavigationScriptsRequest) (response *QueryNavigationScriptsResponse, err error) {
	response = CreateQueryNavigationScriptsResponse()
	err = client.DoAction(request, response)
	return
}

// QueryNavigationScriptsWithChan invokes the voicenavigator.QueryNavigationScripts API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/querynavigationscripts.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryNavigationScriptsWithChan(request *QueryNavigationScriptsRequest) (<-chan *QueryNavigationScriptsResponse, <-chan error) {
	responseChan := make(chan *QueryNavigationScriptsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryNavigationScripts(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryNavigationScriptsWithCallback invokes the voicenavigator.QueryNavigationScripts API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/querynavigationscripts.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryNavigationScriptsWithCallback(request *QueryNavigationScriptsRequest, callback func(response *QueryNavigationScriptsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryNavigationScriptsResponse
		var err error
		defer close(result)
		response, err = client.QueryNavigationScripts(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryNavigationScriptsRequest is the request struct for api QueryNavigationScripts
type QueryNavigationScriptsRequest struct {
	*requests.RpcRequest
	Type       string           `position:"Query" name:"Type"`
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	InstanceId string           `position:"Query" name:"InstanceId"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
	KeyWord    string           `position:"Query" name:"KeyWord"`
	CategoryId string           `position:"Query" name:"CategoryId"`
}

// QueryNavigationScriptsResponse is the response struct for api QueryNavigationScripts
type QueryNavigationScriptsResponse struct {
	*responses.BaseResponse
	RequestId         string             `json:"RequestId" xml:"RequestId"`
	TotalCount        int64              `json:"TotalCount" xml:"TotalCount"`
	PageNumber        int                `json:"PageNumber" xml:"PageNumber"`
	PageSize          int                `json:"PageSize" xml:"PageSize"`
	NavigationScripts []NavigationScript `json:"NavigationScripts" xml:"NavigationScripts"`
}

// CreateQueryNavigationScriptsRequest creates a request to invoke QueryNavigationScripts API
func CreateQueryNavigationScriptsRequest() (request *QueryNavigationScriptsRequest) {
	request = &QueryNavigationScriptsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("VoiceNavigator", "2018-06-12", "QueryNavigationScripts", "voicebot", "openAPI")
	return
}

// CreateQueryNavigationScriptsResponse creates a response to parse from QueryNavigationScripts response
func CreateQueryNavigationScriptsResponse() (response *QueryNavigationScriptsResponse) {
	response = &QueryNavigationScriptsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
