package voicenavigator

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeRedirection invokes the voicenavigator.DescribeRedirection API synchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeredirection.html
func (client *Client) DescribeRedirection(request *DescribeRedirectionRequest) (response *DescribeRedirectionResponse, err error) {
	response = CreateDescribeRedirectionResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeRedirectionWithChan invokes the voicenavigator.DescribeRedirection API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeredirection.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRedirectionWithChan(request *DescribeRedirectionRequest) (<-chan *DescribeRedirectionResponse, <-chan error) {
	responseChan := make(chan *DescribeRedirectionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeRedirection(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeRedirectionWithCallback invokes the voicenavigator.DescribeRedirection API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeredirection.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRedirectionWithCallback(request *DescribeRedirectionRequest, callback func(response *DescribeRedirectionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeRedirectionResponse
		var err error
		defer close(result)
		response, err = client.DescribeRedirection(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeRedirectionRequest is the request struct for api DescribeRedirection
type DescribeRedirectionRequest struct {
	*requests.RpcRequest
	InstanceId         string `position:"Query" name:"InstanceId"`
	NavigationScriptId string `position:"Query" name:"NavigationScriptId"`
}

// DescribeRedirectionResponse is the response struct for api DescribeRedirection
type DescribeRedirectionResponse struct {
	*responses.BaseResponse
	RequestId          string   `json:"RequestId" xml:"RequestId"`
	InstanceId         string   `json:"InstanceId" xml:"InstanceId"`
	CategoryId         string   `json:"CategoryId" xml:"CategoryId"`
	NavigationScriptId string   `json:"NavigationScriptId" xml:"NavigationScriptId"`
	UserUtterance      string   `json:"UserUtterance" xml:"UserUtterance"`
	Prompt             string   `json:"Prompt" xml:"Prompt"`
	Interruptible      bool     `json:"Interruptible" xml:"Interruptible"`
	RedirectionType    string   `json:"RedirectionType" xml:"RedirectionType"`
	RedirectionTarget  string   `json:"RedirectionTarget" xml:"RedirectionTarget"`
	SimilarUtterances  []string `json:"SimilarUtterances" xml:"SimilarUtterances"`
}

// CreateDescribeRedirectionRequest creates a request to invoke DescribeRedirection API
func CreateDescribeRedirectionRequest() (request *DescribeRedirectionRequest) {
	request = &DescribeRedirectionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("VoiceNavigator", "2018-06-12", "DescribeRedirection", "voicebot", "openAPI")
	return
}

// CreateDescribeRedirectionResponse creates a response to parse from DescribeRedirection response
func CreateDescribeRedirectionResponse() (response *DescribeRedirectionResponse) {
	response = &DescribeRedirectionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
