package voicenavigator

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeKnowledge invokes the voicenavigator.DescribeKnowledge API synchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeknowledge.html
func (client *Client) DescribeKnowledge(request *DescribeKnowledgeRequest) (response *DescribeKnowledgeResponse, err error) {
	response = CreateDescribeKnowledgeResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeKnowledgeWithChan invokes the voicenavigator.DescribeKnowledge API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeknowledge.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeKnowledgeWithChan(request *DescribeKnowledgeRequest) (<-chan *DescribeKnowledgeResponse, <-chan error) {
	responseChan := make(chan *DescribeKnowledgeResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeKnowledge(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeKnowledgeWithCallback invokes the voicenavigator.DescribeKnowledge API asynchronously
// api document: https://help.aliyun.com/api/voicenavigator/describeknowledge.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeKnowledgeWithCallback(request *DescribeKnowledgeRequest, callback func(response *DescribeKnowledgeResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeKnowledgeResponse
		var err error
		defer close(result)
		response, err = client.DescribeKnowledge(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeKnowledgeRequest is the request struct for api DescribeKnowledge
type DescribeKnowledgeRequest struct {
	*requests.RpcRequest
	InstanceId         string `position:"Query" name:"InstanceId"`
	NavigationScriptId string `position:"Query" name:"NavigationScriptId"`
}

// DescribeKnowledgeResponse is the response struct for api DescribeKnowledge
type DescribeKnowledgeResponse struct {
	*responses.BaseResponse
	RequestId          string   `json:"RequestId" xml:"RequestId"`
	NavigationScriptId string   `json:"NavigationScriptId" xml:"NavigationScriptId"`
	InstanceId         string   `json:"InstanceId" xml:"InstanceId"`
	CategoryId         string   `json:"CategoryId" xml:"CategoryId"`
	UserUtterance      string   `json:"UserUtterance" xml:"UserUtterance"`
	Answer             string   `json:"Answer" xml:"Answer"`
	Interruptible      bool     `json:"Interruptible" xml:"Interruptible"`
	SimilarUtterances  []string `json:"SimilarUtterances" xml:"SimilarUtterances"`
}

// CreateDescribeKnowledgeRequest creates a request to invoke DescribeKnowledge API
func CreateDescribeKnowledgeRequest() (request *DescribeKnowledgeRequest) {
	request = &DescribeKnowledgeRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("VoiceNavigator", "2018-06-12", "DescribeKnowledge", "voicebot", "openAPI")
	return
}

// CreateDescribeKnowledgeResponse creates a response to parse from DescribeKnowledge response
func CreateDescribeKnowledgeResponse() (response *DescribeKnowledgeResponse) {
	response = &DescribeKnowledgeResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
